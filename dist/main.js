(()=>{"use strict";var n={28:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,':root {\n  --main-padding: 60px;\n  --grey: #7C7C7C;\n  --accent-light-grey: #DFDFDF;\n  --accent-orange: #FFCD93;\n  --accent-green: #AEDEAA;\n  --priority-red: #FF7A7A;\n  --priority-orange: #FDAF54;\n  --priority-green: #87dd7f;\n  --task-settings-minor-info-section-margin: 15px;\n  --task-settings-main-info-section-margin: 50px;\n}\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  list-style: none;\n  font-family: sans-serif;\n}\n\nbody {\n  padding: var(--main-padding);\n  padding-bottom: calc(var(--main-padding) / 2);\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n}\n\nsvg > *{\n  pointer-events: none;\n}\n\n.folders-menu-icon {\n  position: absolute;\n  top: 10px;\n  left: 10px; \n}\n\n.folder-menu, .task-settings {\n  z-index: 2;\n  height: 100vh;\n  position: absolute;\n  background-color: #FFFF;\n  overflow: scroll;\n  display: none;\n  transition: all 0.49s cubic-bezier(0.98, 0.1, 0, 0.98);\n}\n\n.folder-menu {\n  padding-top: calc(var(--main-padding) / 2);\n  top: 0;\n  left: -100%;\n  min-width: 300px;\n  filter: drop-shadow(3px 0 5px rgba(0, 0, 0, 0.1));\n  flex-direction: column;\n  gap: calc(var(--main-padding) / 2);\n}\n\n.folder-menu > *:not(:last-child) {\n  margin-bottom: 30px;\n}\n\n.folder-menu > *:not(.folders-list) {\n  display: flex;\n  margin: 5px calc(var(--main-padding) / 2);\n}\n\n.folder-menu .folders-list {\n  gap: 10px;\n}\n\n.folder-menu .folders-list li {\n  padding: 5px calc(var(--main-padding) / 2);\n}\n\n.folder-menu .folder-menu-header svg {\n  margin-left: auto;\n}\n\n.folder-menu .add-folders {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.folder-menu.visible {\n  left: 0;\n  display: flex;\n}\n\n.folder-menu h1 {\n  text-align: center;\n  display: inline;\n}\n\n.folder-menu ul {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.folder-menu ul li.selected {\n  background-color: var(--accent-light-grey);\n}\n\n.task-settings {\n  padding: calc(var(--main-padding) / 2);\n  top: 0;\n  right: -100%;\n  transform: translateX(-0);\n  width: 500px;\n  filter: drop-shadow(-3px 0 5px rgba(0, 0, 0, 0.1));\n}\n\n.task-settings.visible {\n  right: 0px;\n}\n\n.task-settings .task-minor-info-section > * {\n  margin-bottom: var(--task-settings-minor-info-section-margin);\n}\n\n.task-settings .sidebar-title {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  font-size: 1.4rem;\n}\n\n.task-settings .sidebar-title svg,\n.folder-menu svg {\n  font-size: 1.4rem;\n  color: var(--grey);\n}\n\n.task-settings .sidebar-title input {\n  font-size: 1.4rem;\n}\n\n.task-settings .sidebar-title input,\n.task-settings .task-description textarea,\n.task-todos .form-checkbox-container input[type="text"] {\n  border: none;\n  padding: 5px;\n  border-radius: 6px;\n  transition: all 0.1s;\n}\n\n.task-settings .sidebar-title input:focus,\n.task-settings .task-main-info-section textarea:focus {\n  filter: drop-shadow(0 3px 3px rgba(0, 0, 0, 0.2))\n}\n\n.task-settings .task-minor-container > div {\n  display: flex;\n  align-items: center;\n  margin-bottom: 15px;\n}\n\n.task-settings .task-minor-container h4,\n.task-minor-container h5,\n.task-minor-container input,\n.task-todos .form-checkbox-container input[type="text"] {\n  font-weight: 400;\n  color: var(--grey);\n  font-size: 0.9rem;\n}\n\n.task-settings .task-minor-container h4 {\n  flex: 1;\n}\n\n.task-settings .task-minor-container h5 {\n  font-size: 0.8rem;\n  margin-right: 8px;\n}\n\n.task-settings .task-minor-container svg {\n  color: var(--priority-orange);\n  transition: all 0.1s;\n}\n\n.task-settings .task-minor-container > div:hover svg {\n  transform: scale(1.3);\n  filter: brightness(1.2);\n}\n\n.task-settings .task-minor-container > .task-status > *,\n.task-settings .task-minor-container > .task-priority > * {\n  pointer-events: none;\n}\n\n.task-settings .task-minor-container > .task-status > h5,\n.task-settings .task-minor-container > .task-priority > h5 {\n  color: black;\n  border-radius: 100px;\n  width: fit-content;\n  padding: 5px 15px;\n}\n\n.task-settings .task-minor-container > .task-status > h5 {\n  background-color: var(--accent-light-grey);\n  transition: all 0.2s;\n}\n\n.task-settings .task-priority > h5.high {\n  background-color: var(--priority-red);\n  transition: all 0.2s;\n}\n\n.task-settings .task-minor-container > .task-status > h5.inprogress,\n.task-settings .task-priority > h5.medium {\n  background-color: var(--accent-orange);\n  transition: all 0.2s;\n}\n\n.task-settings .task-minor-container > .task-status > h5.completed,\n.task-settings .task-priority > h5.low {\n  background-color: var(--accent-green);\n  transition: all 0.2s;\n}\n\n.task-settings .task-main-info-section > * {\n  margin-top: var(--task-settings-main-info-section-margin);\n}\n\n.task-settings .task-main-info-section h2 {\n  font-weight: 400;\n  margin-bottom: 10px;\n}\n\n.task-settings .task-main-info-section textarea,\n.task-main-info-section label {\n  color: var(--grey);\n}\n\n.task-settings .task-main-info-section textarea {\n  border: none;\n  resize: vertical;\n  padding: 10px;\n}\n\n.task-settings .task-main-info-section .form-checkbox-container {\n  display: flex;\n  gap: 10px;\n}\n\n.task-settings .task-todos .form-checkbox-container input[type="text"] {\n  flex: 1;\n}\n\n.task-settings .sidebar-title {\n  margin-bottom: 50px;\n}\n\n.task-settings .sidebar-title input {\n  border: none;\n  padding: 5px;\n  border-radius: 6px;\n  transition: all 0.1s;\n}\n\n.task-settings .sidebar-title > svg:last-child {\n  color: var(--priority-red);\n  margin-left: auto;\n}\n\n.task-settings .task-description textarea {\n  font-size: 0.9rem;\n  width: 100%;\n  height: fit-content;\n}\n\n.task-settings .task-main-info-section form {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.task-settings .task-main-info-section form button[type="submit"] {\n  margin-top: var(--task-settings-main-info-section-margin);\n  padding: 10px;\n  border: none;\n  border-radius: 100px;\n  font-weight: bold;\n  color: white;\n  background: linear-gradient(to top right, rgb(164, 233, 144), rgb(121, 197, 100));\n  transition: all 0.2s;\n}\n\n.task-settings .task-main-info-section form button[type="submit"]:hover {\n  filter: drop-shadow(0 5px 0 rgb(123, 180, 108));\n}\n\n.task-settings .form-checkbox-container svg {\n  color: var(--priority-red);\n}\n\n.sidebar-blur {\n  z-index: 1;\n  backdrop-filter: blur(50px);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: #87dd7f;\n  opacity: 0;\n  display: none;\n  transition: all 1s;\n}\n\n.sidebar-blur.visible {\n  opacity: 0.5;\n}\n\nheader h1 {\n  margin-bottom: 30px;\n  font-size: 1.6rem;\n}\n\nnav ul {\n  display: flex;\n  gap: 20px;\n  font-size: 0.9rem;\n}\n\nnav ul li:last-child {\n  margin-left: auto;\n}\n\nhr {\n  border: none;\n  height: 1px;\n  background-color: rgba(0, 0, 0, 0.2);\n}\n\nmain {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  padding: 15px 0;\n  flex-grow: 1;\n  overflow: auto;\n}\n\n.tasks-section, .tasks-container {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.tasks-label {\n  font-size: 0.8rem;\n  background-color: var(--accent-light-grey);\n  text-align: center;\n  width: fit-content;\n  padding: 5px 15px;\n  border-radius: 100px;\n  font-weight: 400;\n}\n\n.inprogress-tasks-section > .tasks-label {\n  background-color: var(--accent-orange);\n}\n\n.completed-tasks-section > .tasks-label {\n  background-color: var(--accent-green);\n}\n\n.tasks-container .task-perspective-container {\n  perspective: 100px;\n}\n\n.tasks-container .task {\n  background-color: white;\n  filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.2));\n  width: 200px;\n  min-height: 100px;\n  border-radius: 3px;\n  border-left: 5px solid var(--accent-light-grey);\n  display: flex;\n  gap: 15px;\n  padding: 5px;\n}\n\n.inprogress-tasks-section > .tasks-container .task {\n  border-left: 5px solid var(--accent-orange);\n}\n\n.completed-tasks-section > .tasks-container .task {\n  border-left: 5px solid var(--accent-green);\n}\n\n.task > svg {\n  color: var(--grey);\n}\n\n.inprogress-tasks-section .task > svg.task-icon {\n  color: var(--accent-orange);\n}\n\n.completed-tasks-section .task > svg.task-icon {\n  color: var(--accent-green);\n}\n\n.task .fa-trash-can,\n.task-settings .sidebar-title > svg:last-child {\n  transition: all 0.2s;\n  margin-left: auto;\n}\n\n.task .fa-trash-can:hover,\n.task-settings .sidebar-title > svg:last-child:hover {\n  color: var(--priority-red);\n  transform: rotate(-10deg);\n}\n\n.task .task-info-container {\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n}\n\n.task .task-info-container > h3 {\n  font-size: 1rem;\n  font-weight: 400;\n  overflow-wrap: break-word;\n  word-break: break-word;\n}\n\n.task .task-info-container > p {\n  font-size: 0.7rem;\n  color: var(--grey);\n}\n\n.task .priority-label {\n  width: 15px;\n  height: 15px;\n  border-radius: 50%;\n  font-size: 0.6rem;\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: rgba(255, 255, 255, 0);\n  transition: all 0.2s, color 0.5s;\n}\n\n.task .priority-label.high {\n  background-color: var(--priority-red);\n}\n\n.task .priority-label.medium {\n  background-color: var(--priority-orange);\n}\n\n.task .priority-label.low {\n  background-color: var(--priority-green);\n}\n\n.task:hover .priority-label {\n  border-radius: 100px;\n  width: 60px;\n  color: rgb(255, 255, 255); /* fallback */\n  color: rgba(255, 255, 255, 1);\n}\n\n.task:hover .priority-label.high::before {\n  content: "High";\n}\n\n.task:hover .priority-label.medium::before {\n  content: "Medium";\n}\n\n.task:hover .priority-label.low::before {\n  content: "Low";\n}\n\n.tasks-section > .add-tasks,\n.task-main-info-section form .add-todos,\n.folder-menu .add-folders {\n  background-color: var(--accent-light-grey);\n  color: var(--grey);\n  border: none;\n  border-radius: 50%;\n  width: 30px;\n  height: 30px;\n}\n\n.tasks-section > .add-tasks > *,\n.task-main-info-section form .add-todos > *,\n.folder-menu .add-folders > * {\n  pointer-events: none;\n}\n\nfooter {\n  text-align: center;\n  color: var(--priority-orange);\n  font-size: 0.8rem;\n}',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:[':root {\n  --main-padding: 60px;\n  --grey: #7C7C7C;\n  --accent-light-grey: #DFDFDF;\n  --accent-orange: #FFCD93;\n  --accent-green: #AEDEAA;\n  --priority-red: #FF7A7A;\n  --priority-orange: #FDAF54;\n  --priority-green: #87dd7f;\n  --task-settings-minor-info-section-margin: 15px;\n  --task-settings-main-info-section-margin: 50px;\n}\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  list-style: none;\n  font-family: sans-serif;\n}\n\nbody {\n  padding: var(--main-padding);\n  padding-bottom: calc(var(--main-padding) / 2);\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n}\n\nsvg > *{\n  pointer-events: none;\n}\n\n.folders-menu-icon {\n  position: absolute;\n  top: 10px;\n  left: 10px; \n}\n\n.folder-menu, .task-settings {\n  z-index: 2;\n  height: 100vh;\n  position: absolute;\n  background-color: #FFFF;\n  overflow: scroll;\n  display: none;\n  transition: all 0.49s cubic-bezier(0.98, 0.1, 0, 0.98);\n}\n\n.folder-menu {\n  padding-top: calc(var(--main-padding) / 2);\n  top: 0;\n  left: -100%;\n  min-width: 300px;\n  filter: drop-shadow(3px 0 5px rgba(0, 0, 0, 0.1));\n  flex-direction: column;\n  gap: calc(var(--main-padding) / 2);\n}\n\n.folder-menu > *:not(:last-child) {\n  margin-bottom: 30px;\n}\n\n.folder-menu > *:not(.folders-list) {\n  display: flex;\n  margin: 5px calc(var(--main-padding) / 2);\n}\n\n.folder-menu .folders-list {\n  gap: 10px;\n}\n\n.folder-menu .folders-list li {\n  padding: 5px calc(var(--main-padding) / 2);\n}\n\n.folder-menu .folder-menu-header svg {\n  margin-left: auto;\n}\n\n.folder-menu .add-folders {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.folder-menu.visible {\n  left: 0;\n  display: flex;\n}\n\n.folder-menu h1 {\n  text-align: center;\n  display: inline;\n}\n\n.folder-menu ul {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.folder-menu ul li.selected {\n  background-color: var(--accent-light-grey);\n}\n\n.task-settings {\n  padding: calc(var(--main-padding) / 2);\n  top: 0;\n  right: -100%;\n  transform: translateX(-0);\n  width: 500px;\n  filter: drop-shadow(-3px 0 5px rgba(0, 0, 0, 0.1));\n}\n\n.task-settings.visible {\n  right: 0px;\n}\n\n.task-settings .task-minor-info-section > * {\n  margin-bottom: var(--task-settings-minor-info-section-margin);\n}\n\n.task-settings .sidebar-title {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  font-size: 1.4rem;\n}\n\n.task-settings .sidebar-title svg,\n.folder-menu svg {\n  font-size: 1.4rem;\n  color: var(--grey);\n}\n\n.task-settings .sidebar-title input {\n  font-size: 1.4rem;\n}\n\n.task-settings .sidebar-title input,\n.task-settings .task-description textarea,\n.task-todos .form-checkbox-container input[type="text"] {\n  border: none;\n  padding: 5px;\n  border-radius: 6px;\n  transition: all 0.1s;\n}\n\n.task-settings .sidebar-title input:focus,\n.task-settings .task-main-info-section textarea:focus {\n  filter: drop-shadow(0 3px 3px rgba(0, 0, 0, 0.2))\n}\n\n.task-settings .task-minor-container > div {\n  display: flex;\n  align-items: center;\n  margin-bottom: 15px;\n}\n\n.task-settings .task-minor-container h4,\n.task-minor-container h5,\n.task-minor-container input,\n.task-todos .form-checkbox-container input[type="text"] {\n  font-weight: 400;\n  color: var(--grey);\n  font-size: 0.9rem;\n}\n\n.task-settings .task-minor-container h4 {\n  flex: 1;\n}\n\n.task-settings .task-minor-container h5 {\n  font-size: 0.8rem;\n  margin-right: 8px;\n}\n\n.task-settings .task-minor-container svg {\n  color: var(--priority-orange);\n  transition: all 0.1s;\n}\n\n.task-settings .task-minor-container > div:hover svg {\n  transform: scale(1.3);\n  filter: brightness(1.2);\n}\n\n.task-settings .task-minor-container > .task-status > *,\n.task-settings .task-minor-container > .task-priority > * {\n  pointer-events: none;\n}\n\n.task-settings .task-minor-container > .task-status > h5,\n.task-settings .task-minor-container > .task-priority > h5 {\n  color: black;\n  border-radius: 100px;\n  width: fit-content;\n  padding: 5px 15px;\n}\n\n.task-settings .task-minor-container > .task-status > h5 {\n  background-color: var(--accent-light-grey);\n  transition: all 0.2s;\n}\n\n.task-settings .task-priority > h5.high {\n  background-color: var(--priority-red);\n  transition: all 0.2s;\n}\n\n.task-settings .task-minor-container > .task-status > h5.inprogress,\n.task-settings .task-priority > h5.medium {\n  background-color: var(--accent-orange);\n  transition: all 0.2s;\n}\n\n.task-settings .task-minor-container > .task-status > h5.completed,\n.task-settings .task-priority > h5.low {\n  background-color: var(--accent-green);\n  transition: all 0.2s;\n}\n\n.task-settings .task-main-info-section > * {\n  margin-top: var(--task-settings-main-info-section-margin);\n}\n\n.task-settings .task-main-info-section h2 {\n  font-weight: 400;\n  margin-bottom: 10px;\n}\n\n.task-settings .task-main-info-section textarea,\n.task-main-info-section label {\n  color: var(--grey);\n}\n\n.task-settings .task-main-info-section textarea {\n  border: none;\n  resize: vertical;\n  padding: 10px;\n}\n\n.task-settings .task-main-info-section .form-checkbox-container {\n  display: flex;\n  gap: 10px;\n}\n\n.task-settings .task-todos .form-checkbox-container input[type="text"] {\n  flex: 1;\n}\n\n.task-settings .sidebar-title {\n  margin-bottom: 50px;\n}\n\n.task-settings .sidebar-title input {\n  border: none;\n  padding: 5px;\n  border-radius: 6px;\n  transition: all 0.1s;\n}\n\n.task-settings .sidebar-title > svg:last-child {\n  color: var(--priority-red);\n  margin-left: auto;\n}\n\n.task-settings .task-description textarea {\n  font-size: 0.9rem;\n  width: 100%;\n  height: fit-content;\n}\n\n.task-settings .task-main-info-section form {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.task-settings .task-main-info-section form button[type="submit"] {\n  margin-top: var(--task-settings-main-info-section-margin);\n  padding: 10px;\n  border: none;\n  border-radius: 100px;\n  font-weight: bold;\n  color: white;\n  background: linear-gradient(to top right, rgb(164, 233, 144), rgb(121, 197, 100));\n  transition: all 0.2s;\n}\n\n.task-settings .task-main-info-section form button[type="submit"]:hover {\n  filter: drop-shadow(0 5px 0 rgb(123, 180, 108));\n}\n\n.task-settings .form-checkbox-container svg {\n  color: var(--priority-red);\n}\n\n.sidebar-blur {\n  z-index: 1;\n  backdrop-filter: blur(50px);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: #87dd7f;\n  opacity: 0;\n  display: none;\n  transition: all 1s;\n}\n\n.sidebar-blur.visible {\n  opacity: 0.5;\n}\n\nheader h1 {\n  margin-bottom: 30px;\n  font-size: 1.6rem;\n}\n\nnav ul {\n  display: flex;\n  gap: 20px;\n  font-size: 0.9rem;\n}\n\nnav ul li:last-child {\n  margin-left: auto;\n}\n\nhr {\n  border: none;\n  height: 1px;\n  background-color: rgba(0, 0, 0, 0.2);\n}\n\nmain {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  padding: 15px 0;\n  flex-grow: 1;\n  overflow: auto;\n}\n\n.tasks-section, .tasks-container {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.tasks-label {\n  font-size: 0.8rem;\n  background-color: var(--accent-light-grey);\n  text-align: center;\n  width: fit-content;\n  padding: 5px 15px;\n  border-radius: 100px;\n  font-weight: 400;\n}\n\n.inprogress-tasks-section > .tasks-label {\n  background-color: var(--accent-orange);\n}\n\n.completed-tasks-section > .tasks-label {\n  background-color: var(--accent-green);\n}\n\n.tasks-container .task-perspective-container {\n  perspective: 100px;\n}\n\n.tasks-container .task {\n  background-color: white;\n  filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.2));\n  width: 200px;\n  min-height: 100px;\n  border-radius: 3px;\n  border-left: 5px solid var(--accent-light-grey);\n  display: flex;\n  gap: 15px;\n  padding: 5px;\n}\n\n.inprogress-tasks-section > .tasks-container .task {\n  border-left: 5px solid var(--accent-orange);\n}\n\n.completed-tasks-section > .tasks-container .task {\n  border-left: 5px solid var(--accent-green);\n}\n\n.task > svg {\n  color: var(--grey);\n}\n\n.inprogress-tasks-section .task > svg.task-icon {\n  color: var(--accent-orange);\n}\n\n.completed-tasks-section .task > svg.task-icon {\n  color: var(--accent-green);\n}\n\n.task .fa-trash-can,\n.task-settings .sidebar-title > svg:last-child {\n  transition: all 0.2s;\n  margin-left: auto;\n}\n\n.task .fa-trash-can:hover,\n.task-settings .sidebar-title > svg:last-child:hover {\n  color: var(--priority-red);\n  transform: rotate(-10deg);\n}\n\n.task .task-info-container {\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n}\n\n.task .task-info-container > h3 {\n  font-size: 1rem;\n  font-weight: 400;\n  overflow-wrap: break-word;\n  word-break: break-word;\n}\n\n.task .task-info-container > p {\n  font-size: 0.7rem;\n  color: var(--grey);\n}\n\n.task .priority-label {\n  width: 15px;\n  height: 15px;\n  border-radius: 50%;\n  font-size: 0.6rem;\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: rgba(255, 255, 255, 0);\n  transition: all 0.2s, color 0.5s;\n}\n\n.task .priority-label.high {\n  background-color: var(--priority-red);\n}\n\n.task .priority-label.medium {\n  background-color: var(--priority-orange);\n}\n\n.task .priority-label.low {\n  background-color: var(--priority-green);\n}\n\n.task:hover .priority-label {\n  border-radius: 100px;\n  width: 60px;\n  color: rgb(255, 255, 255); /* fallback */\n  color: rgba(255, 255, 255, 1);\n}\n\n.task:hover .priority-label.high::before {\n  content: "High";\n}\n\n.task:hover .priority-label.medium::before {\n  content: "Medium";\n}\n\n.task:hover .priority-label.low::before {\n  content: "Low";\n}\n\n.tasks-section > .add-tasks,\n.task-main-info-section form .add-todos,\n.folder-menu .add-folders {\n  background-color: var(--accent-light-grey);\n  color: var(--grey);\n  border: none;\n  border-radius: 50%;\n  width: 30px;\n  height: 30px;\n}\n\n.tasks-section > .add-tasks > *,\n.task-main-info-section form .add-todos > *,\n.folder-menu .add-folders > * {\n  pointer-events: none;\n}\n\nfooter {\n  text-align: center;\n  color: var(--priority-orange);\n  font-size: 0.8rem;\n}'],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,a,i){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);r&&o[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(o).concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},o=[],s=0;s<n.length;s++){var l=n[s],c=r.base?l[0]+r.base:l[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var A=e(u),g={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(g);else{var m=a(g,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:m,references:1})}o.push(u)}return o}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=e(i[o]);t[s].references--}for(var l=r(n,a),c=0;c<i.length;c++){var d=e(i[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=l}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,a&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{var n=e(379),t=e.n(n),r=e(795),a=e.n(r),i=e(569),o=e.n(i),s=e(565),l=e.n(s),c=e(216),d=e.n(c),u=e(589),A=e.n(u),g=e(28),m={};m.styleTagTransform=A(),m.setAttributes=l(),m.insert=o().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),t()(g.Z,m),g.Z&&g.Z.locals&&g.Z.locals;var f={};function p(){return f}function h(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function k(n){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},k(n)}function C(n){h(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"===k(n)&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function v(n,t){h(2,arguments);var e=C(n),r=C(t),a=e.getTime()-r.getTime();return a<0?-1:a>0?1:a}function b(n,t){h(2,arguments);var e=C(n),r=C(t),a=e.getFullYear()-r.getFullYear(),i=e.getMonth()-r.getMonth();return 12*a+i}function E(n){h(1,arguments);var t=C(n);return t.setHours(23,59,59,999),t}function y(n){h(1,arguments);var t=C(n),e=t.getMonth();return t.setFullYear(t.getFullYear(),e+1,0),t.setHours(23,59,59,999),t}function B(n){h(1,arguments);var t=C(n);return E(t).getTime()===y(t).getTime()}function x(n,t){h(2,arguments);var e,r=C(n),a=C(t),i=v(r,a),o=Math.abs(b(r,a));if(o<1)e=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-i*o);var s=v(r,a)===-i;B(C(n))&&1===o&&1===v(n,a)&&(s=!1),e=i*(o-Number(s))}return 0===e?0:e}function w(n,t){return h(2,arguments),C(n).getTime()-C(t).getTime()}var T={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(n){return n<0?Math.ceil(n):Math.floor(n)}};function S(n){return n?T[n]:T.trunc}function D(n,t,e){h(2,arguments);var r=w(n,t)/1e3;return S(null==e?void 0:e.roundingMethod)(r)}var M={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Y(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth,r=n.formats[e]||n.formats[n.defaultWidth];return r}}const q={date:Y({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Y({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Y({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var U={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function F(n){return function(t,e){var r;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&n.formattingValues){var a=n.defaultFormattingWidth||n.defaultWidth,i=null!=e&&e.width?String(e.width):a;r=n.formattingValues[i]||n.formattingValues[a]}else{var o=n.defaultWidth,s=null!=e&&e.width?String(e.width):n.defaultWidth;r=n.values[s]||n.values[o]}return r[n.argumentCallback?n.argumentCallback(t):t]}}const O={ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:F({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:F({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:F({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:F({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:F({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function P(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],i=t.match(a);if(!i)return null;var o,s=i[0],l=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(l)?W(l,(function(n){return n.test(s)})):L(l,(function(n){return n.test(s)}));o=n.valueCallback?n.valueCallback(c):c,o=e.valueCallback?e.valueCallback(o):o;var d=t.slice(s.length);return{value:o,rest:d}}}function L(n,t){for(var e in n)if(n.hasOwnProperty(e)&&t(n[e]))return e}function W(n,t){for(var e=0;e<n.length;e++)if(t(n[e]))return e}var z,N={ordinalNumber:(z={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(z.matchPattern);if(!e)return null;var r=e[0],a=n.match(z.parsePattern);if(!a)return null;var i=z.valueCallback?z.valueCallback(a[0]):a[0];i=t.valueCallback?t.valueCallback(i):i;var o=n.slice(r.length);return{value:i,rest:o}}),era:P({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:P({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:P({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:P({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:P({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const j={code:"en-US",formatDistance:function(n,t,e){var r,a=M[n];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:q,formatRelative:function(n,t,e,r){return U[n]},localize:O,match:N,options:{weekStartsOn:0,firstWeekContainsDate:1}};function X(n,t){if(null==n)throw new TypeError("assign requires that input parameter not be null or undefined");for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n}function H(n){return X({},n)}function Z(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}var R=1440,Q=43200;function G(n){return G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},G(n)}function V(n){return h(1,arguments),n instanceof Date||"object"===G(n)&&"[object Date]"===Object.prototype.toString.call(n)}function $(n){if(h(1,arguments),!V(n)&&"number"!=typeof n)return!1;var t=C(n);return!isNaN(Number(t))}function I(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function J(n,t){h(2,arguments);var e=C(n).getTime(),r=I(t);return new Date(e+r)}function _(n,t){h(2,arguments);var e=I(t);return J(n,-e)}var K=864e5;function nn(n){h(1,arguments);var t=1,e=C(n),r=e.getUTCDay(),a=(r<t?7:0)+r-t;return e.setUTCDate(e.getUTCDate()-a),e.setUTCHours(0,0,0,0),e}function tn(n){h(1,arguments);var t=C(n),e=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(e+1,0,4),r.setUTCHours(0,0,0,0);var a=nn(r),i=new Date(0);i.setUTCFullYear(e,0,4),i.setUTCHours(0,0,0,0);var o=nn(i);return t.getTime()>=a.getTime()?e+1:t.getTime()>=o.getTime()?e:e-1}function en(n){h(1,arguments);var t=tn(n),e=new Date(0);e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0);var r=nn(e);return r}var rn=6048e5;function an(n,t){var e,r,a,i,o,s,l,c;h(1,arguments);var d=p(),u=I(null!==(e=null!==(r=null!==(a=null!==(i=null==t?void 0:t.weekStartsOn)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==a?a:d.weekStartsOn)&&void 0!==r?r:null===(l=d.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==e?e:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=C(n),g=A.getUTCDay(),m=(g<u?7:0)+g-u;return A.setUTCDate(A.getUTCDate()-m),A.setUTCHours(0,0,0,0),A}function on(n,t){var e,r,a,i,o,s,l,c;h(1,arguments);var d=C(n),u=d.getUTCFullYear(),A=p(),g=I(null!==(e=null!==(r=null!==(a=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:A.firstWeekContainsDate)&&void 0!==r?r:null===(l=A.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==e?e:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(u+1,0,g),m.setUTCHours(0,0,0,0);var f=an(m,t),k=new Date(0);k.setUTCFullYear(u,0,g),k.setUTCHours(0,0,0,0);var v=an(k,t);return d.getTime()>=f.getTime()?u+1:d.getTime()>=v.getTime()?u:u-1}function sn(n,t){var e,r,a,i,o,s,l,c;h(1,arguments);var d=p(),u=I(null!==(e=null!==(r=null!==(a=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(o=t.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:d.firstWeekContainsDate)&&void 0!==r?r:null===(l=d.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==e?e:1),A=on(n,t),g=new Date(0);g.setUTCFullYear(A,0,u),g.setUTCHours(0,0,0,0);var m=an(g,t);return m}var ln=6048e5;function cn(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const dn=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return cn("yy"===t?r%100:r,t.length)},un=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):cn(e+1,2)},An=function(n,t){return cn(n.getUTCDate(),t.length)},gn=function(n,t){return cn(n.getUTCHours()%12||12,t.length)},mn=function(n,t){return cn(n.getUTCHours(),t.length)},fn=function(n,t){return cn(n.getUTCMinutes(),t.length)},pn=function(n,t){return cn(n.getUTCSeconds(),t.length)},hn=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return cn(Math.floor(r*Math.pow(10,e-3)),t.length)};var kn={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),a=r>0?r:1-r;return e.ordinalNumber(a,{unit:"year"})}return dn(n,t)},Y:function(n,t,e,r){var a=on(n,r),i=a>0?a:1-a;return"YY"===t?cn(i%100,2):"Yo"===t?e.ordinalNumber(i,{unit:"year"}):cn(i,t.length)},R:function(n,t){return cn(tn(n),t.length)},u:function(n,t){return cn(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return cn(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return cn(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return un(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return cn(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,r){var a=function(n,t){h(1,arguments);var e=C(n),r=an(e,t).getTime()-sn(e,t).getTime();return Math.round(r/ln)+1}(n,r);return"wo"===t?e.ordinalNumber(a,{unit:"week"}):cn(a,t.length)},I:function(n,t,e){var r=function(n){h(1,arguments);var t=C(n),e=nn(t).getTime()-en(t).getTime();return Math.round(e/rn)+1}(n);return"Io"===t?e.ordinalNumber(r,{unit:"week"}):cn(r,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):An(n,t)},D:function(n,t,e){var r=function(n){h(1,arguments);var t=C(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=e-r;return Math.floor(a/K)+1}(n);return"Do"===t?e.ordinalNumber(r,{unit:"dayOfYear"}):cn(r,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return cn(i,2);case"eo":return e.ordinalNumber(i,{unit:"day"});case"eee":return e.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return cn(i,t.length);case"co":return e.ordinalNumber(i,{unit:"day"});case"ccc":return e.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(a,{width:"narrow",context:"standalone"});case"cccccc":return e.day(a,{width:"short",context:"standalone"});default:return e.day(a,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return cn(a,t.length);case"io":return e.ordinalNumber(a,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return gn(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):mn(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):cn(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):cn(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):fn(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):pn(n,t)},S:function(n,t){return hn(n,t)},X:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return vn(a);case"XXXX":case"XX":return bn(a);default:return bn(a,":")}},x:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return vn(a);case"xxxx":case"xx":return bn(a);default:return bn(a,":")}},O:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+Cn(a,":");default:return"GMT"+bn(a,":")}},z:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+Cn(a,":");default:return"GMT"+bn(a,":")}},t:function(n,t,e,r){var a=r._originalDate||n;return cn(Math.floor(a.getTime()/1e3),t.length)},T:function(n,t,e,r){return cn((r._originalDate||n).getTime(),t.length)}};function Cn(n,t){var e=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),i=r%60;if(0===i)return e+String(a);var o=t||"";return e+String(a)+o+cn(i,2)}function vn(n,t){return n%60==0?(n>0?"-":"+")+cn(Math.abs(n)/60,2):bn(n,t)}function bn(n,t){var e=t||"",r=n>0?"-":"+",a=Math.abs(n);return r+cn(Math.floor(a/60),2)+e+cn(a%60,2)}const En=kn;var yn=function(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},Bn=function(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const xn={p:Bn,P:function(n,t){var e,r=n.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return yn(n,t);switch(a){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",yn(a,t)).replace("{{time}}",Bn(i,t))}};var wn=["D","DD"],Tn=["YY","YYYY"];function Sn(n){return-1!==wn.indexOf(n)}function Dn(n){return-1!==Tn.indexOf(n)}function Mn(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Yn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,qn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Un=/^'([^]*?)'?$/,Fn=/''/g,On=/[a-zA-Z]/;function Pn(n,t,e){var r,a,i,o,s,l,c,d,u,A,g,m,f,k,v,b,E,y;h(2,arguments);var B=String(t),x=p(),w=null!==(r=null!==(a=null==e?void 0:e.locale)&&void 0!==a?a:x.locale)&&void 0!==r?r:j,T=I(null!==(i=null!==(o=null!==(s=null!==(l=null==e?void 0:e.firstWeekContainsDate)&&void 0!==l?l:null==e||null===(c=e.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==s?s:x.firstWeekContainsDate)&&void 0!==o?o:null===(u=x.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==i?i:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var S=I(null!==(g=null!==(m=null!==(f=null!==(k=null==e?void 0:e.weekStartsOn)&&void 0!==k?k:null==e||null===(v=e.locale)||void 0===v||null===(b=v.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==f?f:x.weekStartsOn)&&void 0!==m?m:null===(E=x.locale)||void 0===E||null===(y=E.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==g?g:0);if(!(S>=0&&S<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!w.localize)throw new RangeError("locale must contain localize property");if(!w.formatLong)throw new RangeError("locale must contain formatLong property");var D=C(n);if(!$(D))throw new RangeError("Invalid time value");var M=Z(D),Y=_(D,M),q={firstWeekContainsDate:T,weekStartsOn:S,locale:w,_originalDate:D},U=B.match(qn).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,xn[t])(n,w.formatLong):n})).join("").match(Yn).map((function(r){if("''"===r)return"'";var a=r[0];if("'"===a)return Ln(r);var i=En[a];if(i)return null!=e&&e.useAdditionalWeekYearTokens||!Dn(r)||Mn(r,t,String(n)),null!=e&&e.useAdditionalDayOfYearTokens||!Sn(r)||Mn(r,t,String(n)),i(Y,r,w.localize,q);if(a.match(On))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("");return U}function Ln(n){var t=n.match(Un);return t?t[1].replace(Fn,"'"):n}const Wn=(n,t)=>{for(const e in t)n.setAttribute(e,t[e])},zn=document.getElementsByTagName("textarea");for(let n=0;n<zn.length;n++)"Add a description for this task!"==zn[n].value?zn[n].setAttribute("style","height: 50px; overflow-y:hidden"):zn[n].setAttribute("style",`height: ${zn[n].scrollHeight}px; overflow-y:hidden;`),zn[n].addEventListener("input",Nn,!1);function Nn(){this.style.height=0,this.style.height=this.scrollHeight+"px"}document.querySelector(".main-content-container");const jn=document.querySelector(".sidebar-blur"),Xn=document.querySelector(".folder-menu"),Hn=document.querySelector(".add-folders"),Zn=document.querySelector(".tasks-container.upcoming-tasks"),Rn=document.querySelector(".tasks-container.inprogress-tasks"),Qn=document.querySelector(".tasks-container.completed-tasks"),Gn=document.querySelector(".task-settings"),Vn=Gn.querySelector(".task-minor-info-section > .sidebar-title > input"),$n=Gn.querySelector(".task-minor-container > .task-status > h5"),In=Gn.querySelector(".task-minor-container > .task-priority > h5"),Jn=Gn.querySelector(".task-main-info-section > .task-description > textarea"),_n=Gn.querySelector(".task-date-created > h5"),Kn=Gn.querySelector(".task-date-due > input"),nt=Gn.querySelector(".task-todos").querySelector("form");class tt{static addFolderToSidebar=n=>{const t=Xn.querySelector("ul"),e=document.createElement("li");e.setAttribute("folderindex",lt.length-1),e.textContent=n.name,lt.length>1&&Xn.querySelector(".selected-folder").classList.remove("selected-folder"),e.classList.add("selected-folder"),t.appendChild(e)};static renderFolder=n=>{this.clearFolderTasksElements()};static createTaskElements=(n,t)=>{const e=document.createElement("div");e.classList.add("task-perspective-container");const r=document.createElement("div");r.classList.add("task");const a=document.createElement("i");a.classList.add("fa-solid","fa-face-smile","fa-lg","task-icon");const i=document.createElement("div");i.classList.add("task-info-container");const o=document.createElement("h3");o.textContent=n.name;const s=document.createElement("p");s.textContent=`Due in ${function(n,t,e){var r,a;h(2,arguments);var i=p(),o=null!==(r=null!==(a=null==e?void 0:e.locale)&&void 0!==a?a:i.locale)&&void 0!==r?r:j;if(!o.formatDistance)throw new RangeError("locale must contain formatDistance property");var s=v(n,t);if(isNaN(s))throw new RangeError("Invalid time value");var l,c,d=X(H(e),{addSuffix:Boolean(null==e?void 0:e.addSuffix),comparison:s});s>0?(l=C(t),c=C(n)):(l=C(n),c=C(t));var u,A=D(c,l),g=(Z(c)-Z(l))/1e3,m=Math.round((A-g)/60);if(m<2)return null!=e&&e.includeSeconds?A<5?o.formatDistance("lessThanXSeconds",5,d):A<10?o.formatDistance("lessThanXSeconds",10,d):A<20?o.formatDistance("lessThanXSeconds",20,d):A<40?o.formatDistance("halfAMinute",0,d):A<60?o.formatDistance("lessThanXMinutes",1,d):o.formatDistance("xMinutes",1,d):0===m?o.formatDistance("lessThanXMinutes",1,d):o.formatDistance("xMinutes",m,d);if(m<45)return o.formatDistance("xMinutes",m,d);if(m<90)return o.formatDistance("aboutXHours",1,d);if(m<R){var f=Math.round(m/60);return o.formatDistance("aboutXHours",f,d)}if(m<2520)return o.formatDistance("xDays",1,d);if(m<Q){var k=Math.round(m/R);return o.formatDistance("xDays",k,d)}if(m<86400)return u=Math.round(m/Q),o.formatDistance("aboutXMonths",u,d);if((u=x(c,l))<12){var b=Math.round(m/Q);return o.formatDistance("xMonths",b,d)}var E=u%12,y=Math.floor(u/12);return E<3?o.formatDistance("aboutXYears",y,d):E<9?o.formatDistance("overXYears",y,d):o.formatDistance("almostXYears",y+1,d)}(n.dateCreated,n.dateDue)}`;const l=document.createElement("div");l.classList.add("priority-label",n.priority);const c=document.createElement("i");return c.classList.add("fa-solid","fa-trash-can"),i.append(o),i.append(s),i.append(l),r.appendChild(a),r.appendChild(i),r.appendChild(c),e.appendChild(r),e.setAttribute("id",t),e};static appendTaskElementsToDOM=(n,t)=>{"upcoming"==n.status?Zn.appendChild(t):"inprogress"==n.status?Rn.appendChild(t):Qn.appendChild(t)};static createTodoElements=n=>{this.clearTodoElements(),n.todos.forEach((t=>{const e=document.createElement("div");e.classList.add("form-checkbox-container");const r=document.createElement("input");Wn(r,{type:"checkbox",id:`checkbox${n.numOfTodos}`,name:`checkbox${n.numOfTodos}`});const a=document.createElement("input");Wn(a,{type:"text",value:t.description});const i=document.createElement("i");i.classList.add("fa-solid","fa-square-minus","fa-xl"),e.appendChild(r),e.appendChild(a),e.appendChild(i),nt.insertBefore(e,nt.querySelector(".add-todos.btn"))}))};static clearTodoElements=()=>{nt.querySelectorAll("div").forEach((n=>n.remove()))};static clearFolderTasksElements=()=>{document.querySelectorAll(".tasks-container").forEach((n=>n.innerHTML=""))};static showTaskSettingsView=n=>{[jn,Gn].forEach((n=>n.setAttribute("style","display: block"))),Gn.setAttribute("taskindex",n.index),setTimeout((()=>{jn.classList.add("visible"),Gn.classList.add("visible")}),100),Vn.setAttribute("value",n.name),Vn.value=n.name,$n.className="",$n.classList.add(n.status),$n.textContent="upcoming"==n.status?"Upcoming":"inprogress"==n.status?"In Progress":"Completed",In.className="",In.classList.add(n.priority),In.textContent="low"==n.priority?"Low":"medium"==n.priority?"Medium":"High",_n.textContent=`${Pn(n.dateCreated,"PP")} ${Pn(n.dateCreated,"p")}`,Kn.value=`${Pn(n.dateDue,"y")}-${Pn(n.dateDue,"MM")}-${Pn(n.dateDue,"dd")}`,Kn.setAttribute("value",`${Pn(n.dateDue,"y")}-${Pn(n.dateDue,"MM")}-${Pn(n.dateDue,"dd")}`),Jn.setAttribute("value",n.description),Jn.value=n.description,this.createTodoElements(n)};static closeTaskSettingsView=n=>{[Gn,jn].forEach((n=>n.classList.remove("visible"))),setTimeout((()=>{[Gn,jn].forEach((n=>n.setAttribute("style","display: none")))}),1e3)};static closeFoldersSettingsView=n=>{[Xn,jn].forEach((n=>n.classList.remove("visible"))),setTimeout((()=>{[Xn,jn].forEach((n=>n.setAttribute("style","display: none")))}),1e3)};static toggleSettingsViewTaskStatus=n=>{const t=et.querySelector("h5"),e=n.indexOf(t.className);return t.className="",t.classList.add(`${n[(e+1)%n.length]}`),$n.textContent="upcoming"==t.className?"Upcoming":"inprogress"==t.className?"In Progress":"Completed",t.className};static toggleSettingsViewTaskPriorities=n=>{const t=rt.querySelector("h5"),e=n.indexOf(t.className);return t.className="",t.classList.add(`${n[(e+1)%n.length]}`),In.textContent="low"==t.className?"Low":"medium"==t.className?"Medium":"High",t.className}}const et=Gn.querySelector(".task-status"),rt=Gn.querySelector(".task-priority"),at=["upcoming","inprogress","completed"],it=["low","medium","high"];document.addEventListener("click",(n=>{const t=n.target;let e;if(t==et||t==rt){const n=Xn.querySelector(".selected-folder").getAttribute("folderindex"),r=Gn.getAttribute("taskindex"),a=document.getElementById(r),i=lt[n].tasks[r];if(t.classList.contains("task-status")){const n=tt.toggleSettingsViewTaskStatus(at);i.status=n}else e=tt.toggleSettingsViewTaskPriorities(it),i.priority=e,a.querySelector(".priority-label").classList.remove("low","medium","high"),a.querySelector(".priority-label").classList.add(e);tt.appendTaskElementsToDOM(i,a)}if(t.classList.contains("task-settings-exit-btn")||t.classList.contains("sidebar-blur")){tt.closeTaskSettingsView(n);const e=Xn.querySelector(".selected-folder").getAttribute("folderindex"),r=Gn.getAttribute("taskindex");t.classList.contains("sidebar-blur")&&"display: block"==Gn.getAttribute("style")&&lt[e].updateTask(r)}t.classList.contains("folders-menu-icon")&&([jn,Xn].forEach((n=>n.setAttribute("style","display: block"))),setTimeout((()=>{jn.classList.add("visible"),Xn.classList.add("visible")}),100)),(t.classList.contains("folders-menu-exit-btn")||n.target.classList.contains("sidebar-blur"))&&tt.closeFoldersSettingsView(n)})),Hn.addEventListener("click",(n=>{tt.clearFolderTasksElements();const t=new ct;lt.push(t),tt.addFolderToSidebar(t)}));class ot{#n;#t=!1;constructor(n){this.#n=n}get description(){return this.#n}get status(){return this.#t}set description(n){this.#n=n}set status(n){this.#t=n}toggleStatus=()=>{this.status=0==this.status}}class st{#e;#t;#r;#a;#i=new Date;#o=new Date;#n="Add a description for this task!";#s=[];#l=0;constructor(n,t,e,r){this.#e=n,this.#t=t.toLowerCase(),this.#r=e.toLowerCase(),this.#a=r,this.#o.setHours(23,59,59),this.#l||(this.createTodo(),this.createTodo(),this.createTodo())}get name(){return this.#e}get status(){return this.#t}get priority(){return this.#r}get index(){return this.#a}get dateCreated(){return this.#i}get dateDue(){return this.#o}get description(){return this.#n}get todos(){return this.#s}get numOfTodos(){return this.#l}set name(n){this.#e=n}set status(n){this.#t=n}set priority(n){this.#r=n}set dateDue(n){this.#o=n}set description(n){this.#n=n}createTodo=()=>{this.#l++;const n=new ot("Enter a description");this.todos.push(n)};deleteTodo=()=>{};completeTask=()=>{}}let lt=[];class ct{#e=`Folder ${lt.length+1}`;#c=[];#d=0;constructor(){this.#d||(this.createTask("upcoming"),this.createTask("inprogress"),this.createTask("inprogress"),this.createTask("completed"))}get name(){return this.#e}get tasks(){return this.#c}get numOfTasks(){return this.#d}set name(n){}createTask=n=>{this.#d++;const t=new st(`Task ${this.numOfTasks}`,"upcoming"==n||"inprogress"==n||"completed"==n?n:this.determineTaskStatus(n),"low",this.numOfTasks-1);this.#c.push(t);const e=tt.createTaskElements(t,this.numOfTasks-1);e.addEventListener("click",(()=>tt.showTaskSettingsView(t))),tt.appendTaskElementsToDOM(t,e)};determineTaskStatus=n=>n.target.classList.contains("upcoming-tasks")?"upcoming":n.target.classList.contains("inprogress-tasks")?"inprogress":"completed";updateTask=n=>{const t=document.getElementById(`${n}`),e=this.tasks[n],r=document.querySelector(".task-date-due > input").value;e.name=document.querySelector(".sidebar-title > input").value,e.description=document.querySelector(".task-description > textarea").value,t.querySelector("h3").textContent=e.name,e.dateDue=new Date(r);const a=document.querySelectorAll(".task-todos > form > div");e.todos.forEach(((n,t)=>{const e=a[t].querySelector('input[type="text"]');n.description=e.value}))};deleteTask=n=>{this.#d--}}for(let n=0;n<4;n++){tt.clearFolderTasksElements();const n=new ct;lt.push(n),tt.addFolderToSidebar(n)}((n,t,e)=>{for(let t=0;t<n.length;t++)n[t].addEventListener("click",e)})(document.querySelectorAll(".add-tasks"),0,(n=>{const t=document.querySelector(".selected-folder").getAttribute("folderindex");lt[t].createTask(n)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,